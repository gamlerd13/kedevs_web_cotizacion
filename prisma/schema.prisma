// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  STAFF
  USER
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  role     UserRole @default(ADMIN)
}

model Client {
  id                 Int          @id @default(autoincrement())
  doc                String?
  name               String
  representativeName String?
  createAt           DateTime     @default(now())
  cotizaciones       Cotizacion[]
}

model Module {
  id         Int                @id @default(autoincrement())
  name       String
  days       Int?
  parentId   Int? // Field to reference the parent module (nullable)
  parent     Module?            @relation("Submodules", fields: [parentId], references: [id])
  submodules Module[]           @relation("Submodules")
  cotizacion ModuleCotizacion[]
}

enum UtilityPercent {
  FORTY
  THIRTY
  TWENTY
  FIFTEEN
  TEN
}

enum SubmittableAndPayTime {
  WEEK
  TWO_WEEKS
  THREE_WEEKS
  MONTH
  TWO_MONTHS
}

//Its a text to fill the pdf
model Floro {
  id          Int    @id @default(autoincrement())
  description String
}

model Cotizacion {
  id              Int                   @id @default(autoincrement())
  code            Int
  quotationNumber Int
  name            String
  description     String? //Este va a ser el floro
  hosting         Boolean               @default(false)
  utilityPercent  UtilityPercent        @default(THIRTY)
  timeOver        SubmittableAndPayTime @default(TWO_WEEKS)
  submittable     SubmittableAndPayTime @default(TWO_WEEKS)
  createAt        DateTime              @default(now())
  client          Client                @relation(fields: [clientId], references: [id])
  clientId        Int
  modules         ModuleCotizacion[]
}

model ModuleCotizacion {
  moduleId     Int
  cotizacionId Int
  module       Module     @relation(fields: [moduleId], references: [id])
  cotizacion   Cotizacion @relation(fields: [cotizacionId], references: [id])

  @@id([moduleId, cotizacionId])
}

// cost calculation should not be handle in database

// Esto es aparte
enum EmployePosition {
  DEVELOPER_FULLSTACK
  DEVELOPER_FRONTEND
  DEVELOPER_BACKEND
  ARQUITECT
  MARKETER
  UX_DESIGNER
  CONTADOR
}

enum Experience {
  INTER
  JUNIOR
  SEMI_SENIOR
  SENIOR
}

model Employe {
  id         Int             @id @default(autoincrement())
  name       String
  email      String?
  position   EmployePosition @default(DEVELOPER_FULLSTACK)
  experience Experience      @default(SEMI_SENIOR)
}
